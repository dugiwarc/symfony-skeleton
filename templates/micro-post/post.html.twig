{% extends 'base.html.twig' %}

{% block title %}@{{ post.user.username }} on {{ post.time|date("d/m/Y") }}{% endblock %}

{% block body %}
    <article class="media text-muted pt-3" id="{{ post.id }}">
        {% set initials = post.user.fullName|split(' ') %}
        <a href="{{ path('micro_post_user', {'username': post.user.username}) }}">
            <img src="holder.js/32x32?text={{ attribute(initials, 0)|first }}{{ attribute(initials, 1)|first }}&bg=e83e8c&fg=fff&size=8" alt="" class="mr-2 rounded">
        </a>
        <p class="media-body pb-3 mb-0 small lh-125 border-bottom border-gray">
        <span class="d-block">
            <strong class="text-gray-dark">
                <a href="{{ path('micro_post_user', {'username': post.user.username}) }}">
                    @{{ post.user.username }}
                </a>
            </strong> <small>Â· <a href="{{ path('micro_post_post', {'id': post.id}) }}">{{ post.time|date("d/m/Y") }}</a></small>
        </span>
            {{ post.text }}
        </p>
    </article>

    {% if is_granted('ROLE_USER') %}
        {% set isSignaled = post.getSignaledBy.contains(app.user) %}
        {% set isLiked = post.getLikedBy.contains(app.user) %}
    <div>
        <button type="button"
                id="js-report-btn"
                class="btn btn-outline-secondary btn-sm"
               >
            {% if not isSignaled %}Report{% else %}Reported{% endif %}
            <span class="badge badge-light" id="js-report-count">
                    {{ post.getSignaledBy.count }}
                </span>
        </button>
            <a class="btn btn-sm btn-primary" href="{{ path('comment_add', {'id': post.id}) }}">
                {{ 'Add comment'|trans }}
            </a>
            <button type="button"
                    id="js-like-btn"
                    class="btn btn-outline-secondary btn-sm"
                    style="display: {% if not isLiked %}block{% else %}none{% endif %}">
                Like
                <span class="badge badge-light" id="js-like-count">
                    {{ post.getLikedBy.count }}
                </span>
            </button>

            <button type="button"
                    id="js-unlike-btn"
                    class="btn btn-outline-danger btn-sm"
                    style="display: {% if isLiked %}block{% else %}none{% endif %}">
                Unlike
                <span class="badge badge-light" id="js-unlike-count">
                    {{ post.getLikedBy.count }}
                </span>
            </button>
        {% for comment in comments %}
            <div>{{ comment.getText }}</div>
        {% endfor %}
        </div>
    {% endif %}
{% endblock %}

{% block javascripts %}
    {{ parent() }}

    <script>
        (function(){
            const likeButton = document.getElementById("js-like-btn");
            const reportButton = document.getElementById("js-report-btn");
            const likeCount = document.getElementById("js-like-count");
            const reportCount = document.getElementById("js-report-count");
            const unlikeButton = document.getElementById("js-unlike-btn");
            const unlikeCount = document.getElementById("js-unlike-count");

            const changeButton = (buttonToHide, buttonToShow)=> {
                buttonToHide.disabled = false;
                buttonToHide.style.display = "none";
                buttonToShow.style.display = "block";
            };

            const clickHandler = (buttonToHide, buttonToShow, likeCount, path)=> {
                buttonToHide.addEventListener("click", async event => {
                    buttonToHide.disabled = true;
                    event.preventDefault();

                    try {
                        const response = await fetch(path, {"credentials": "include"});
                        const data = await response.json();

                        likeCount.innerText = data.count;
                        changeButton(buttonToHide, buttonToShow);
                    } catch(e) {
                        console.warn(e);
                        changeButton(buttonToHide, buttonToShow);
                    }
                })
            };

            const signalHandler = (button, path) => {
                button.addEventListener('click', async event=> {
                    try {
                        const response = await fetch(path, {'credentials': 'include'});
                        const data = await response.json();

                        reportCount.innerText = data.count;
                    } catch(e) {
                        console.warn(e);
                    }
                })
            }

            clickHandler(likeButton, unlikeButton, unlikeCount, '{{ path('likes_like', {'id': post.id}) }}');
            clickHandler(unlikeButton, likeButton, likeCount, '{{ path('likes_unlike', {'id': post.id}) }}');
            signalHandler(reportButton, '{{ path('signal_post', {'id': post.id}) }}')

        }());
    </script>
{% endblock %}